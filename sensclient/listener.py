'''
Defines an asynchronous listener for listening to events generated by a
serially-connected TinyOS sensor.
'''
import asyncio, io
import serial
import tinyos


listening = False
task = None


async def listen(callback, device, baudrate, sampling_rate):
    '''
    Listens for events on the specified device at the specified
    rate.
    Arguments:
        callback: The callback to execute when an event occurs.
        device: The device to listen for events on.
        baudrate: The signalling rate of the connected device.
        sampling_rate: The rate at which to sample events.
    '''
    global listening

    try:
        # open the serial port on the specified device
        ser = serial.Serial(device, baudrate=baudrate)
        # wrap the serial device
        sio = io.TextIOWrapper(io.BufferedWRPair(ser, ser))
        while listening:
            # read from the datastream
            line = sio.readline()
            # check if there was data
            if line:
                # call the callback function
                callback(line)
            # wait for the specified amount of time
            await asyncio.sleep(1/sampling_rate)
        # close the serial device
        ser.close()
    except SerialException:
        listening = False
        print('Unable to connect to serial device...')


async def start(callback, device, baudrate, sampling_rate):
    '''
    Starts listening for events on the specified device.
    Arguments:
        callback: The callback to execute when an event
        occurs. Note that the callback must receive an
        event object.
        device: The device to listen on.
        baudrate: The signalling rate of the connected device
        sampling_rate: The rate at which samples are drawn.
    '''
    global task

    loop = asyncio.get_event_loop()
    task = loop.crete_task(listen(callback, device, sampling_rate))

    try:
        loop.run_until_complete(task)
    except asyncio.CancelledError:
        pass


async def stop():
    '''
    Stops the listener.
    '''
    global listening
    global task

    listening = False
    task.cancel()
